{
  "title": "Podio",
  "description": "Podio Project Management and Collaboration Software",
  "buildType": "docker",
  "credentials": {
    "fields": {
      "oauth": {
        "label": "Authentication",
        "viewClass": "OAuthFieldView",
        "required": true
      }
    },
    "oauth2": {
      "client_id": "{{PODIO_APP_ID}}",
      "client_secret": "{{PODIO_APP_SECRET}}",
      "email": "{{email}}",
      "apiKey": "{{apiKey}}",
      "auth_uri": "https://podio.com/oauth/authorize",
      "token_uri": "https://podio.com/oauth/token"
    }
  },
  "actions": {
    "getTokens": {
      "main": "./lib/actions/all/getTokens.js",
      "title": "Credential: Get Tokens",
      "fields": {
        "random_id": {
          "viewClass": "TextFieldView",
          "prompt": "Enter Any Random Data",
          "label": "Random Data",
          "required": true
        }
      }
    },
    "createItem": {
      "main": "./lib/actions/items/createItem.js",
      "title": "Item: Create",
      "fields": {
        "appId": {
          "viewClass": "TextFieldView",
          "prompt": "Enter app_id",
          "label": "Podio Application",
          "required": true
        },
        "hook": {
          "label": "Hook: True if hooks should be executed for the change, false otherwise",
          "viewClass": "CheckBoxView",
          "note": "True if hooks should be executed for the change, false otherwise. Default value: true"
        },
        "silent": {
          "label": "Silent: True if notifications will be generated, false otherwise",
          "viewClass": "CheckBoxView",
          "note": "If set to true, the object will not be bumped up in the stream and notifications will not be generated. Default value: false"
        }
      },
      "dynamicMetadata": true
    },
    "updateItem": {
      "main": "./lib/actions/items/updateItem.js",
      "title": "Item: Update",
      "fields": {
        "appId": {
          "viewClass": "TextFieldView",
          "prompt": "Enter app_id",
          "label": "Podio Application",
          "required": true
        },
        "hook": {
          "label": "Hook: True if hooks should be executed for the change, false otherwise",
          "viewClass": "CheckBoxView",
          "note": "True if hooks should be executed for the change, false otherwise. Default value: true"
        },
        "silent": {
          "label": "Silent: True if notifications will be generated, false otherwise",
          "viewClass": "CheckBoxView",
          "note": "If set to true, the object will not be bumped up in the stream and notifications will not be generated. Default value: false"
        }
      },
      "dynamicMetadata": true
    },
    "getItem": {
      "main": "./lib/actions/items/getItem.js",
      "title": "Item: Get",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getItem.in.json"
      }
    },
    "endSpaceMembership": {
      "main": "./lib/actions/spaces/endSpaceMembership.js",
      "title": "Space: End Membership",
      "metadata": {
        "in": "./lib/schemas/endSpaceMembership.in.json"
      }
    },
    "getItemValue": {
      "main": "./lib/actions/items/getItemV2.js",
      "title": "Item: Get Value V2",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getItem.in.json"
      }
    },
    "getApp": {
      "main": "./lib/actions/apps/getApp.js",
      "title": "App: Get",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getApp.in.json"
      }
    },
    "getAppField": {
      "main": "./lib/actions/apps/getAppField.js",
      "title": "App: Get Field",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getAppField.in.json"
      }
    },
    "getAppByLabel": {
      "main": "./lib/actions/apps/getAppByLabel.js",
      "title": "App: Get by org label, space label and app label",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/apps/getAppByLabel.in.json"
      }
    },
    "getAppDependencies": {
      "main": "./lib/actions/apps/getAppDependencies.js",
      "title": "App: Get dependencies",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/apps/getAppDependencies.in.json"
      }
    },
    "getAppSpaceByUrlLabel": {
      "main": "./lib/actions/apps/getAppSpaceByUrlLabel.js",
      "title": "App: Get app on space by URL label",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/apps/getAppSpaceByUrlLabel.in.json"
      }
    },
    "getAppsBySpace": {
      "main": "./lib/actions/apps/getAppsBySpace.js",
      "title": "App: Get apps by space",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/apps/getAppsBySpace.in.json"
      }
    },
    "getFeatures": {
      "main": "./lib/actions/apps/getFeatures.js",
      "title": "App: Get features",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/apps/getFeatures.in.json"
      }
    },
    "getSpaceAppDependencies": {
      "main": "./lib/actions/apps/getSpaceAppDependencies.js",
      "title": "App: Get Space App Dependencies",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/apps/getSpaceAppDependencies.in.json"
      }
    },
    "getTopApps": {
      "main": "./lib/actions/apps/getTopApps.js",
      "title": "App: Get Top Apps",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/apps/getTopApps.in.json"
      }
    },
    "getTopAppsOrganization": {
      "main": "./lib/actions/apps/getTopAppsOrganization.js",
      "title": "App: Get Top Apps for Organization",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/apps/getTopAppsOrganization.in.json"
      }
    },
    "updateApp": {
      "main": "./lib/actions/apps/updateApp.js",
      "title": "App: Update",
      "metadata": {
        "in": "./lib/schemas/apps/updateApp.in.json"
      }
    },
    "updateAppDescription": {
      "main": "./lib/actions/apps/updateAppDescription.js",
      "title": "App: Update App Description",
      "metadata": {
        "in": "./lib/schemas/apps/updateAppDescription.in.json"
      }
    },
    "updateAppOrder": {
      "main": "./lib/actions/apps/updateAppOrder.js",
      "title": "App: Update App Order",
      "metadata": {
        "in": "./lib/schemas/apps/updateAppOrder.in.json"
      }
    },
    "updateAppUsageInstructions": {
      "main": "./lib/actions/apps/updateAppUsageInstructions.js",
      "title": "App: Update App Usage Instructions",
      "metadata": {
        "in": "./lib/schemas/apps/updateAppUsageInstructions.in.json"
      }
    },
    "getIconSuggestions": {
      "main": "./lib/actions/apps/getIconSuggestions.js",
      "title": "App: Get Icon Suggestions",
      "metadata": {
        "in": "./lib/schemas/apps/getIconSuggestions.in.json"
      }
    },
    "getBatch": {
      "main": "./lib/actions/batch/getBatch.js",
      "title": "Batch: Get Batch",
      "metadata": {
        "in": "./lib/schemas/batch/getBatch.in.json"
      }
    },
    "getBatches": {
      "main": "./lib/actions/batch/getBatches.js",
      "title": "Batch: Get Batches"
    },
    "getRunningBatches": {
      "main": "./lib/actions/batch/getRunningBatches.js",
      "title": "Batch: Get Running Batches",
      "metadata": {
        "in": "./lib/schemas/batch/getRunningBatches.in.json"
      }
    },
    "filterAppCalendar": {
      "main": "./lib/actions/calendar/filterAppCalendar.js",
      "title": "Calendar: Filter App Calendar",
      "metadata": {
        "in": "./lib/schemas/calendar/filterAppCalendar.in.json"
      }
    },
    "getAppCalendar": {
      "main": "./lib/actions/calendar/getAppCalendar.js",
      "title": "Calendar: Get App Calendar",
      "metadata": {
        "in": "./lib/schemas/calendar/getAppCalendar.in.json"
      }
    },
    "getAppCalendarIcal": {
      "main": "./lib/actions/calendar/getAppCalendarIcal.js",
      "title": "Calendar: Get App Calendar as iCal",
      "metadata": {
        "in": "./lib/schemas/calendar/getAppCalendarIcal.in.json"
      }
    },
    "getCalendarSummary": {
      "main": "./lib/actions/calendar/getCalendarSummary.js",
      "title": "Calendar: Get Calendar Summary",
      "metadata": {
        "in": "./lib/schemas/calendar/getCalendarSummary.in.json"
      }
    },
    "getCalendarSummaryPersonal": {
      "main": "./lib/actions/calendar/getCalendarSummaryPersonal.js",
      "title": "Calendar: Get Calendar Summary for Personal",
      "metadata": {
        "in": "./lib/schemas/calendar/getCalendarSummaryPersonal.in.json"
      }
    },
    "getCalendarSummarySpace": {
      "main": "./lib/actions/calendar/getCalendarSummarySpace.js",
      "title": "Calendar: Get Calendar Summary for Space",
      "metadata": {
        "in": "./lib/schemas/calendar/getCalendarSummarySpace.in.json"
      }
    },
    "getExportByRef": {
      "main": "./lib/actions/calendar/getExportByRef.js",
      "title": "Calendar: Get Export by Ref",
      "metadata": {
        "in": "./lib/schemas/calendar/getExportByRef.in.json"
      }
    },
    "getExportsbyReference": {
      "main": "./lib/actions/calendar/getExportsbyReference.js",
      "title": "Calendar: Get Exports by Reference",
      "metadata": {
        "in": "./lib/schemas/calendar/getExportsbyReference.in.json"
      }
    },
    "getGlobalCalendar": {
      "main": "./lib/actions/calendar/getGlobalCalendar.js",
      "title": "Calendar: Get Global Calendar",
      "metadata": {
        "in": "./lib/schemas/calendar/getGlobalCalendar.in.json"
      }
    },
    "getGlobalCalendarIcal": {
      "main": "./lib/actions/calendar/getGlobalCalendarIcal.js",
      "title": "Calendar: Get Global Calendar as iCal",
      "metadata": {
        "in": "./lib/schemas/calendar/getGlobalCalendarIcal.in.json"
      }
    },
    "getGlobalExport": {
      "main": "./lib/actions/calendar/getGlobalExport.js",
      "title": "Calendar: Get Global Export",
      "metadata": {
        "in": "./lib/schemas/calendar/getGlobalExport.in.json"
      }
    },
    "getGlobalExports": {
      "main": "./lib/actions/calendar/getGlobalExports.js",
      "title": "Calendar: Get Global Exports",
      "metadata": {
        "in": "./lib/schemas/calendar/getGlobalExports.in.json"
      }
    },
    "getItemFieldCalendarIcal": {
      "main": "./lib/actions/calendar/getItemFieldCalendarIcal.js",
      "title": "Calendar: Get Item Field Calendar as iCal",
      "metadata": {
        "in": "./lib/schemas/calendar/getItemFieldCalendarIcal.in.json"
      }
    },
    "getLinkedAccountCalendar": {
      "main": "./lib/actions/calendar/getLinkedAccountCalendar.js",
      "title": "Calendar: Get Linked Account Calendar",
      "metadata": {
        "in": "./lib/schemas/calendar/getLinkedAccountCalendar.in.json"
      }
    },
    "getSpaceCalendar": {
      "main": "./lib/actions/calendar/getSpaceCalendar.js",
      "title": "Calendar: Get Space Calendar",
      "metadata": {
        "in": "./lib/schemas/calendar/getSpaceCalendar.in.json"
      }
    },
    "getSpaceCalendarIcal": {
      "main": "./lib/actions/calendar/getSpaceCalendarIcal.js",
      "title": "Calendar: Get Space Calendar as iCal",
      "metadata": {
        "in": "./lib/schemas/calendar/getSpaceCalendarIcal.in.json"
      }
    },
    "getTaskCalendarIcal": {
      "main": "./lib/actions/calendar/getTaskCalendarIcal.js",
      "title": "Calendar: Get Task Calendar as iCal",
      "metadata": {
        "in": "./lib/schemas/calendar/getTaskCalendarIcal.in.json"
      }
    },
    "moveExternalCalendarEvent": {
      "main": "./lib/actions/calendar/moveExternalCalendarEvent.js",
      "title": "Calendar: Move External Calendar Event",
      "metadata": {
        "in": "./lib/schemas/calendar/moveExternalCalendarEvent.in.json"
      }
    },
    "updateCalendarEvent": {
      "main": "./lib/actions/calendar/updateCalendarEvent.js",
      "title": "Calendar: Update Calendar Event",
      "metadata": {
        "in": "./lib/schemas/calendar/updateCalendarEvent.in.json"
      }
    },
    "UpdateExternalCalendarEventDuration": {
      "main": "./lib/actions/calendar/UpdateExternalCalendarEventDuration.js",
      "title": "Calendar: Update External Calendar Event Duration",
      "metadata": {
        "in": "./lib/schemas/calendar/UpdateExternalCalendarEventDuration.in.json"
      }
    },
    "activateApp": {
      "main": "./lib/actions/apps/activateApp.js",
      "title": "App: Activate",
      "metadata": {
        "in": "./lib/schemas/apps/activateApp.in.json"
      }
    },
    "deactivateApp": {
      "main": "./lib/actions/apps/deactivateApp.js",
      "title": "App: Deactivate",
      "metadata": {
        "in": "./lib/schemas/apps/deactivateApp.in.json"
      }
    },
    "deleteApp": {
      "main": "./lib/actions/apps/deleteApp.js",
      "title": "App: Delete",
      "metadata": {
        "in": "./lib/schemas/apps/deleteApp.in.json"
      }
    },
    "deleteAppField": {
      "main": "./lib/actions/apps/deleteAppField.js",
      "title": "App: Delete Field",
      "metadata": {
        "in": "./lib/schemas/apps/deleteAppField.in.json"
      }
    },
    "getSpace": {
      "main": "./lib/actions/spaces/getSpace.js",
      "title": "Space: Get",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getSpace.in.json"
      }
    },
    "createSpace": {
      "main": "./lib/actions/spaces/createSpace.js",
      "title": "Space: Create",
      "fields": {
        "orgId": {
          "viewClass": "SelectView",
          "prompt": "Select an Organisation",
          "label": "Podio Organisation",
          "required": true,
          "model": "organisations"
        },
        "privacy": {
          "viewClass": "SelectView",
          "prompt": "Privacy",
          "label": "Privacy",
          "required": true,
          "model": {
            "open": "open",
            "closed": "closed"
          }
        },
        "auto_join": {
          "viewClass": "SelectView",
          "prompt": "Auto Join",
          "label": "Auto Join (new employees should be joined automatically)",
          "model": {
            "true": "true",
            "false": "false"
          }
        },
        "post_on_new_app": {
          "viewClass": "SelectView",
          "prompt": "New App",
          "label": "New App Notification (if new apps should be announced with a status update)",
          "model": {
            "true": "true",
            "false": "false"
          }
        },
        "post_on_new_member": {
          "viewClass": "SelectView",
          "prompt": "New Member",
          "label": "New member Notification (if new members should be announced with a status update)",
          "model": {
            "true": "true",
            "false": "false"
          }
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "dynamicMetadata": true
    },
    "updateSpace": {
      "main": "./lib/actions/spaces/updateSpace.js",
      "title": "Space: Update",
      "fields": {
        "orgId": {
          "viewClass": "SelectView",
          "prompt": "Select an Organisation",
          "label": "Podio Organisation",
          "required": true,
          "model": "organisations"
        },
        "privacy": {
          "viewClass": "SelectView",
          "prompt": "Privacy",
          "label": "Privacy",
          "required": true,
          "model": {
            "open": "open",
            "closed": "closed"
          }
        },
        "auto_join": {
          "viewClass": "SelectView",
          "prompt": "Auto Join",
          "label": "Auto Join (new employees should be joined automatically)",
          "model": {
            "true": "true",
            "false": "false"
          }
        },
        "post_on_new_app": {
          "viewClass": "SelectView",
          "prompt": "New App",
          "label": "New App Notification (if new apps should be announced with a status update)",
          "model": {
            "true": "true",
            "false": "false"
          }
        },
        "post_on_new_member": {
          "viewClass": "SelectView",
          "prompt": "New Member",
          "label": "New member Notification (if new members should be announced with a status update)",
          "model": {
            "true": "true",
            "false": "false"
          }
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "dynamicMetadata": true
    },
    "getSpaceMembers": {
      "main": "./lib/actions/spaces/getSpaceMembers.js",
      "title": "Space: Get Space Members v2",
      "fields": {
        "orgId": {
          "viewClass": "SelectView",
          "prompt": "Select an Organisation",
          "label": "Podio Organisation",
          "required": true,
          "model": "organisations"
        },
        "spaceId": {
          "viewClass": "SelectView",
          "prompt": "Select a Space",
          "label": "Podio Space",
          "required": true,
          "model": "spaces"
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "dynamicMetadata": true
    },
    "getSpaceMember": {
      "main": "./lib/actions/spaces/getSpaceMembership.js",
      "title": "Space: Get Space Member",
      "metadata": {
        "in": "./lib/schemas/getSpaceMember.in.json"
      }
    },
    "getSpaceMembership": {
      "main": "./lib/actions/spaces/getSpaceMembership.js",
      "title": "Space: Get Space Membership",
      "metadata": {
        "in": "./lib/schemas/getSpaceMembership.in.json"
      }
    },
    "search": {
      "main": "./lib/actions/all/search.js",
      "title": "Search All",
      "fields": {
        "counts": {
          "viewClass": "SelectView",
          "prompt": "Counts",
          "label": "Counts",
          "model": {
            "true": "true",
            "false": "false"
          }
        },
        "highlights": {
          "viewClass": "SelectView",
          "label": "highlights",
          "model": {
            "true": "true",
            "false": "false"
          }
        },
        "limit": {
          "viewClass": "TextFieldView",
          "label": "Limit",
          "placeholder": "100"
        },
        "offset": {
          "viewClass": "TextFieldView",
          "label": "Offset",
          "placeholder": "0"
        },
        "ref_type": {
          "viewClass": "SelectView",
          "prompt": "Ref Type",
          "label": "Ref Type",
          "model": {
            "item": "item",
            "task": "task",
            "admin": "file",
            "regular": "conversation",
            "light": "profile",
            "guest": "app"
          }
        },
        "query": {
          "viewClass": "TextFieldView",
          "label": "query",
          "placeholder": ""
        },
        "search_fields": {
          "viewClass": "TextFieldView",
          "label": "Search Fields",
          "placeholder": "100"
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      }
    },
    "searchOrg": {
      "main": "./lib/actions/all/searchOrg.js",
      "title": "Search: Organisation",
      "fields": {
        "orgId": {
          "viewClass": "SelectView",
          "prompt": "Select an Organisation",
          "label": "Podio Organisation",
          "required": true,
          "model": "organisations"
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "dynamicMetadata": true
    },
    "searchSpace": {
      "main": "./lib/actions/all/searchSpace.js",
      "title": "Search: Space",
      "fields": {
        "orgId": {
          "viewClass": "SelectView",
          "prompt": "Select an Organisation",
          "label": "Podio Organisation",
          "required": true,
          "model": "organisations"
        },
        "spaceId": {
          "viewClass": "SelectView",
          "prompt": "Select a Space",
          "label": "Podio Space",
          "required": true,
          "model": "spaces"
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "dynamicMetadata": true
    },
    "searchApp": {
      "main": "./lib/actions/all/searchApp.js",
      "title": "Search: App",
      "dynamicMetadata": true,
      "metadata": {
        "in": "./lib/schemas/searchApp.in.json"
      }
    },
    "getComment": {
      "main": "./lib/actions/comments/getComment.js",
      "title": "Comment: Get",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getComment.in.json"
      }
    },
    "getCommentRevision": {
      "main": "./lib/actions/comments/getCommentRevision.js",
      "title": "Comment: Get Revision",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getComment.in.json"
      }
    },
    "getCommentObject": {
      "main": "./lib/actions/comments/getCommentObject.js",
      "title": "Comment: Get Object",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getCommentObject.in.json"
      }
    },
    "addComment": {
      "main": "./lib/actions/comments/addComment.js",
      "title": "Comment: Add",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/addComment.in.json"
      }
    },
    "updateComment": {
      "main": "./lib/actions/comments/updateComment.js",
      "title": "Comment: Update",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/updateComment.in.json"
      }
    },
    "deleteComment": {
      "main": "./lib/actions/comments/deleteComment.js",
      "title": "Comment: Delete",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getComment.in.json"
      }
    },
    "getFile": {
      "main": "./lib/actions/files/getFile.js",
      "title": "File: Get",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getFile.in.json"
      }
    },
    "getTask": {
      "main": "./lib/actions/tasks/getTask.js",
      "title": "Task: Get",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getTask.in.json"
      }
    },
    "getAllApp": {
      "main": "./lib/actions/apps/getAllApp.js",
      "title": "App: Get All App",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getAllApp.in.json"
      }
    },
    "getOrg": {
      "main": "./lib/actions/organisations/getOrg.js",
      "title": "Org: Get Organisations",
      "fields": {
        "orgId": {
          "viewClass": "SelectView",
          "prompt": "Select an Organisation",
          "label": "Podio Organisation",
          "required": true,
          "model": "organisations"
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      }
    },
    "getOrgUrl": {
      "main": "./lib/actions/organisations/getOrgUrl.js",
      "title": "Org: Get Organisation's URL",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getOrgUrl.in.json"
      }
    },
    "getAppBySpace": {
      "main": "./lib/actions/spaces/getAppBySpace.js",
      "title": "Space: Get App's By Space",
      "fields": {
        "orgId": {
          "viewClass": "SelectView",
          "prompt": "Select an Organisation",
          "label": "Podio Organisation",
          "required": true,
          "model": "organisations"
        },
        "spaceId": {
          "viewClass": "SelectView",
          "prompt": "Select a Space",
          "label": "Podio Space",
          "required": true,
          "model": "spaces"
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "dynamicMetadata": true
    },
    "updateAppField": {
      "main": "./lib/actions/apps/updateAppField.js",
      "title": "App: Update App Field",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/updateAppField.in.json"
      },
      "dynamicMetadata": true
    },
    "getAllSpacesOrg": {
      "main": "./lib/actions/organisations/getAllSpacesOrg.js",
      "title": "Org: Get All Spaces on Organisations",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getOrg.in.json"
      }
    },
    "getHooks": {
      "main": "./lib/actions/hooks/getHooks.js",
      "title": "Hooks: Get",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/createHooks.in.json"
      }
    },
    "deleteHooks": {
      "main": "./lib/actions/hooks/deleteHooks.js",
      "title": "Hooks: Delete",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/deleteHooks.in.json"
      }
    },
    "updateSpaceMembership": {
      "main": "./lib/actions/spaces/updateSpaceMembership.js",
      "title": "Space: Update Space Membership(Deprecated)",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/updateSpaceMembership.in.json"
      }
    },
    "updateSpaceMembershipV2": {
      "main": "./lib/actions/spaces/updateSpaceMembershipV2.js",
      "title": "Space: Update Space Membership V2",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/updateSpaceMembershipV2.in.json"
      }
    },
    "addMemberToSpace": {
      "main": "./lib/actions/spaces/addMemberToSpace.js",
      "title": "Space: Add Member to Space",
      "fields": {
        "role": {
          "label": "The role of the new users",
          "required": true,
          "viewClass": "SelectView",
          "model": {
            "employee": "Employee",
            "external": "External",
            "admin": "Admin",
            "guest": "Guest",
            "premium": "Premium"
          }
        }
      },
      "metadata": {
        "in": "./lib/schemas/addMemberToSpace.in.json"
      }
    },
    "filterItems": {
      "main": "./lib/actions/all/filterItems.js",
      "title": "Items: Filters",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/filterItems.in.json"
      }
    },
    "filterItemsByView": {
      "main": "./lib/actions/items/filterItembyView.js",
      "title": "Items: Filter Items By View",
      "fields": {
        "appId": {
          "viewClass": "TextFieldView",
          "prompt": "Enter app_id",
          "label": "Podio Application",
          "required": true
        },
        "viewID": {
          "viewClass": "TextFieldView",
          "prompt": "Enter View ID",
          "label": "Enter View ID",
          "required": true
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "dynamicMetadata": true
    },
    "getItemsbyApp": {
      "main": "./lib/actions/items/getItemsbyApp.js",
      "title": "Items: Get All APP Items",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getItemsbyApp.in.json"
      }
    },
    "getFilesbyApp": {
      "main": "./lib/actions/files/getFilesbyApp.js",
      "title": "Items: Get All APP Files",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getFilesbyApp.in.json"
      }
    },
    "getView": {
      "main": "./lib/actions/all/getView.js",
      "title": "Views: Get View",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getView.in.json"
      }
    },
    "getViews": {
      "main": "./lib/actions/all/getViews.js",
      "title": "Views: Get Views",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getViews.in.json"
      }
    },
    "createView": {
      "main": "./lib/actions/views/createView.js",
      "title": "Views: Create Views",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/createView.in.json"
      }
    },
    "deleteView": {
      "main": "./lib/actions/views/deleteView.js",
      "title": "Views: Delete View",
      "metadata": {
        "in": "./lib/schemas/deleteView.in.json"
      }
    },
    "createHooks": {
      "main": "./lib/actions/hooks/createHooks.js",
      "title": "Hooks: Create",
      "fields": {
        "hookType": {
          "viewClass": "SelectView",
          "prompt": "Select a Hook Type!!!",
          "label": "Select Hook Type",
          "model": {
            "space": "Space",
            "app": "App",
            "field": "Field"
          },
          "required": true
        },
        "hook_type": {
          "viewClass": "MultiSelectView",
          "label": "Hook",
          "model": "getHooks",
          "required": true
        }
      },
      "metadata": {
        "in": "./lib/schemas/createHooks.in.json"
      }
    },
    "getItemReferences": {
      "main": "./lib/actions/items/getItemReferences.js",
      "title": "Items: Get Item References",
      "metadata": {
        "in": "./lib/schemas/getItemReferences.in.json"
      }
    },
    "findReferencesItems": {
      "main": "./lib/actions/items/findReferencesItems.js",
      "title": "Items: Find referenceable items",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        },
        "field_id": {
          "viewClass": "TextFieldView",
          "label": "Field Id",
          "placeholder": "Field id",
          "required": true
        }
      },
      "metadata": {
        "in": "./lib/schemas/findReferencesItems.in.json"
      }
    },
    "getReferencesToItemByField": {
      "main": "./lib/actions/items/getReferencesToItemByField.js",
      "title": "Items: Get references to item by field",
      "fields": {
        "field_id": {
          "viewClass": "TextFieldView",
          "label": "Field Id",
          "placeholder": "Field id",
          "required": true
        },
        "item_id": {
          "viewClass": "TextFieldView",
          "label": "Item Id",
          "placeholder": "Item id",
          "required": true
        }
      },
      "metadata": {
        "in": "./lib/schemas/getReferencesToItemByField.in.json"
      }
    },
    "verifyHooks": {
      "main": "./lib/actions/hooks/verifyHooks.js",
      "title": "Hook: Verify",
      "metadata": {
        "in": "./lib/schemas/verifyHooks.in.json"
      }
    },
    "installApp": {
      "main": "./lib/actions/apps/install.js",
      "title": "App: Install",
      "metadata": {
        "in": "./lib/schemas/installApp.in.json"
      }
    },
    "getItemRevisionDifference": {
      "main": "./lib/actions/items/getItemRevisionDifference.js",
      "title": "Items: Get item revision difference",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/getItemRevisionDifference.in.json"
      }
    },
    "getActualFile": {
      "main": "./lib/actions/files/getActualFile.js",
      "title": "File: Get Actual File",
      "metadata": {
        "in": "./lib/schemas/getActualFile.in.json"
      }
    },
    "getActualFileThatApp": {
      "main": "./lib/actions/files/getActualFileThatApp.js",
      "title": "File: Get Actual File (ThatApp)",
      "metadata": {
        "in": "./lib/schemas/getActualFileThatApp.in.json"
      }
    },
    "moveToFilehaven": {
      "main": "./lib/actions/files/moveToFilehaven.js",
      "title": "File: Move file within Filehaven Folder",
      "metadata": {
        "in": "./lib/schemas/moveToFilehaven.in.json"
      }
    },
    "sendtoDocuphase": {
      "main": "./lib/actions/files/sendtoDocuphase.js",
      "title": "File: Send File to Docuphase",
      "metadata": {
        "in": "./lib/schemas/sendtoDocuphase.in.json"
      }
    },
    "cloneItem": {
      "main": "./lib/actions/items/cloneItem.js",
      "title": "Item: Clone Item",
      "metadata": {
        "in": "./lib/schemas/cloneItem.in.json"
      }
    },
    "getUserStreamV3": {
      "main": "./lib/actions/user/getUserStream.js",
      "title": "Get user stream",
      "metadata": {
        "in": "./lib/schemas/getUserStream.in.json"
      }
    },
    "getItemCount": {
      "main": "./lib/actions/items/getItemCount.js",
      "title": "Get item count",
      "metadata": {
        "in": "./lib/schemas/getItemCount.in.json"
      }
    },
    "FilterItemsByView": {
      "main": "./lib/actions/items/FilterItemsByView.js",
      "title": "Items: Get items by app and view",
      "fields": {
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      },
      "metadata": {
        "in": "./lib/schemas/FilterItemsByView.in.json"
      }
    },
    "deleteItem": {
      "main": "./lib/actions/items/deleteItem.js",
      "title": "Delete Item",
      "metadata": {
        "in": "./lib/schemas/deleteItem.in.json"
      }
    },
    "showCredential": {
      "main": "./lib/actions/all/showCredential.js",
      "title": "Show Credential",
      "fields": {
        "splitResult": {
          "label": "Show Credentials",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        }
      }
    },
    "attachFile": {
      "main": "./lib/actions/files/attachFile.js",
      "title": "Files: Attach file",
      "fields": {
        "ref_type": {
          "viewClass": "SelectView",
          "label": "Ref Type",
          "placeholder": "The type of object the file should be attached to",
          "required": true,
          "model": {
            "status": "status",
            "item": "item",
            "comment": "comment",
            "space": "space",
            "task": "task"
          },
          "prompt": "Select Object Ref type"
        }
      },
      "metadata": {
        "in": "./lib/schemas/attachFile.in.json"
      }
    },
    "publicUrl": {
      "main": "./lib/actions/files/uploadFileV2.js",
      "title": "Files: Upload file",
      "metadata": {
        "in": "./lib/schemas/uploadFile.in.json"
      }
    },
    "publicUrl": {
      "main": "./lib/actions/files/uploadFileV3.js",
      "title": "Files: Upload file v3(Base64 data)",
      "metadata": {
        "in": "./lib/schemas/uploadFilev3.in.json"
      }
    },
    "uploadFile": {
      "main": "./lib/actions/files/uploadFile.js",
      "title": "Files: Upload file V2",
      "metadata": {
        "in": "./lib/schemas/uploadFileV2.in.json"
      }
    },
    "copyFile": {
      "main": "./lib/actions/files/copyFile.js",
      "title": "Files: Copy file",
      "metadata": {
        "in": "./lib/schemas/copyFile.in.json"
      }
    }
  },
  "triggers": {
    "getApplications": {
      "main": "./lib/triggers/getApplications.js",
      "title": "Get Applications",
      "type": "polling",
      "metadata": {
        "in": "./lib/schemas/getApp.in.json"
      }
    },
    "getItems": {
      "main": "./lib/triggers/getItems.js",
      "title": "Get Item",
      "type": "polling",
      "metadata": {
        "in": "./lib/schemas/getItem.in.json"
      }
    },
    "getOrganisations": {
      "main": "./lib/triggers/getOrganisations.js",
      "title": "Get Organisation",
      "type": "polling",
      "metadata": {
        "in": "./lib/schemas/getOrg.in.json"
      }
    },
    "getSpaces": {
      "main": "./lib/triggers/getSpaces.js",
      "title": "Get Spaces",
      "type": "polling",
      "metadata": {
        "in": "./lib/schemas/getSpace.in.json"
      }
    },
    "verifyHook": {
      "main": "./lib/triggers/verifyHooks.js",
      "title": "Hooks Trigger",
      "metadata": {
        "in": "./lib/schemas/verifyHooks.in.json"
      }
    }
  }
}
